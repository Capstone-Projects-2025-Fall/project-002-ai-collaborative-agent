"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2418],{26615:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"system-architecture/Sequence Diagrams","title":"Sequence Diagrams","description":"\x3c!--","source":"@site/docs/system-architecture/Sequence Diagrams.md","sourceDirName":"system-architecture","slug":"/system-architecture/Sequence Diagrams","permalink":"/project-002-ai-collaborative-agent/docs/system-architecture/Sequence Diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-002-ai-collaborative-agent/edit/main/documentation/docs/system-architecture/Sequence Diagrams.md","tags":[],"version":"current","lastUpdatedBy":"tuh12626","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Development Environment","permalink":"/project-002-ai-collaborative-agent/docs/system-architecture/development-environment"},"next":{"title":"Version Control","permalink":"/project-002-ai-collaborative-agent/docs/system-architecture/version-control"}}');var s=n(74848),i=n(28453);const r={sidebar_position:5},c="Sequence Diagrams",o={},d=[];function p(e){const t={h1:"h1",header:"header",hr:"hr",mermaid:"mermaid",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"})}),"\n",(0,s.jsx)(t.h1,{id:"create-team--define-problem",children:"Create Team & Define Problem"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the sequence of interactions required to fulfill the "Create Team & Define Problem" use case. The process begins when a User (acting as a student) initiates the "Open \'New Team\'" action within the VS Code Extension.'}),"\n",(0,s.jsx)(t.mermaid,{value:'sequenceDiagram \n  participant U as User \n  participant X as VS Code Extension \n  participant A as Backend API \n  participant D as DB \n\n  U->>X: Open "New Team" \n  X->>A: POST /teams {name, attrs} \n  A->>D: insert Team, Member \n  D--\x3e>A: ok \n  A--\x3e>X: 201 {teamId} \n  X--\x3e>U: Show team dashboard'}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"define-project-specifications",children:"Define Project Specifications"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the flow of actions involved when a user defines project specifications within the Collaborative Agent system. This activity is a crucial part of the "Create Team & Define Problem" use case, or a subsequent step in project setup.'}),"\n",(0,s.jsx)(t.mermaid,{value:"sequenceDiagram \n  participant U as User \n  participant X as VS Code Extension \n  participant A as Backend API \n  participant D as DB \n  \n  U->>X: Enter project name/desc \n  X->>A: POST /projects \n  A->>D: insert Project \n  U->>X: Upload requirements file/link \n  X->>A: POST /projects/{id}/requirements \n  A->>D: store file metadata \n  A--\x3e>X: 200 \n"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"allocate-tasks-to-members-agent-delegation",children:"Allocate Tasks to Members (Agent Delegation)"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the process where the AI Agent automatically delegates coding tasks among team members, corresponding to your "Allocate Tasks to Members" use case.'}),"\n",(0,s.jsx)(t.mermaid,{value:"sequenceDiagram \n  participant X as VS Code Extension \n  participant A as Backend API \n  participant L as LLM Adapter \n participant D as DB \n  participant R as Real-time \n\n  X->>A: POST /tasks/auto-allocate {projectId} \n  A->>D: fetch members, skills, reqs \n  A->>L: delegate(prompt with goals+skills) \n  L--\x3e>A: task list with assignees \n  A->>D: upsert tasks+assignments \n  A->>R: publish task.created / assigned \n  A--\x3e>X: 200 {tasks} \n"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"real-time-status-updates",children:"Real-time Status Updates"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates how real-time status updates are communicated between team members, a key aspect of several use cases, including "Allocate Tasks to Members" and "Simultaneous Coding Session."'}),"\n",(0,s.jsx)(t.mermaid,{value:"  sequenceDiagram \n    participant X1 as Dev A Extension \n    participant X2 as Dev B Extension \n    participant R as Real-time \n    participant A as Backend \n  \n    X1->>R: connect(token), subscribe(project) \n    X2->>R: connect(token), subscribe(project) \n    R--\x3e>X1: presence {B online} \n    X1->>A: PATCH /tasks/{id} status=in_progress \n    A->>R: publish task.updated \n    R--\x3e>X2: task.updated "}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"request-peer-review-of-code",children:"Request Peer Review of Code"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the process for initiating a peer code review. The flow begins when a Dev (Developer), through the VS Code Extension, issues a "Request review on PR" action. This could involve selecting a specific code change, file, or branch to be reviewed.'}),"\n",(0,s.jsx)(t.mermaid,{value:"  sequenceDiagram \n  participant Dev \n  participant X as VS Code Extension \n  participant A as Backend API \n  participant D as DB \n  participant R as Real-time \n  \n\n  Dev->>X: Request review on PR#123 \n  X->>A: POST /reviews/request {diff, refs} \n  A->>D: insert Review \n  A->>R: publish review.created \n  R--\x3e>X: notify assignee(s) \n "}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"agent-provides-real-time-feedback",children:"Agent Provides Real-Time Feedback"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the process where the AI agent provides instant, real-time feedback and suggestions to a student while they are coding, directly addressing your "Agent Provides Real-Time Feedback" use case.'}),"\n",(0,s.jsx)(t.mermaid,{value:"  sequenceDiagram \n  participant X as VS Code Extension  \n  participant A as Backend API\n  participant L as LLM Adapter\n  participant R as Real-time \n\n  X->>A: POST /agent/hint {file, cursor, context} \n  A->>L: srsSuggest(...) \n  L--\x3e>A: suggestion {snippet, rationale} \n  A->>R: publish agent.suggestion \n  R--\x3e>X: agent.suggestion "}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"agent-suggests-improvements-based-on-peer-review",children:"Agent Suggests Improvements Based on Peer Review"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates how the AI agent processes peer review feedback and generates actionable suggestions for the code author, directly addressing your "Agent Suggests Improvements Based on Peer Review" use case.'}),"\n",(0,s.jsx)(t.mermaid,{value:"  sequenceDiagram \n  participant A as Backend API\n  participant L as LLM Adapter\n  participant D as DB  \n  participant R as Real-time  \n  participant X as VS Code Extension\n\n  A->>D: fetch review comments \n  A->>L: summarize + action items \n  L--\x3e>A: suggestions[] \n  A->>D: store suggestions \n  A->>R: publish agent.suggestion \n  R--\x3e>X: show next actions "}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h1,{id:"finalize-and-submit-project-work",children:"Finalize and Submit Project Work"}),"\n",(0,s.jsx)(t.p,{children:'This diagram illustrates the process for a team to finalize and submit their project, directly addressing your "Finalize and Submit Project Work" use case.'}),"\n",(0,s.jsx)(t.mermaid,{value:'  sequenceDiagram \n  participant U as User \n  participant X as VS Code Extension\n  participant A as Backend API\n  participant D as DB  \n  \n  U->>X: Click "Finalize" \n  X->>A: POST /projects/{id}/finalize \n  A->>D: mark project status=final \n  A--\x3e>X: 200 {artifact links} \n  X--\x3e>U: Confirmation + artifacts '}),"\n",(0,s.jsx)(t.hr,{})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var a=n(96540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);